<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>JSON Parser</title>
    <style type="text/css">
  body {
   color: #000000;
   background-color: #d6e6e6;
   margin-top: 1cm;
   margin-left: 1cm;
   line-height: 1.6;
   font-family: sans-serif;
  }
  h1, h2 {
   color: #004646;
  }
  </style>
  </head>
  <body>
    <h1>JSON Parser</h1>
    <h2>(import (macduffie json))</h2>
    <p>(macduffie json) is just a simple JSON parser. This library
  is now based on the <a href="https://github.com/fourthbit/spheres">SchemeSpheres</a> JSON parser, and no longer has any code from
  Dominique Boucher. With this change, the license is now Expat
  (MIT). Furthermore, the parser looks close to standards
  compliant, but there remains a problem with Unicode surrogate
  pairs.</p>
    <p>This library depends on (srfi 69) to represent JSON objects.
  Otherwise, only scheme-small libraries are used.</p>
    <p>This library is regularly tested in Chibi, Kawa, and Gauche (in
  R7RS-strict mode).</p>
    <h2>Library Procedures</h2>
    <ul style="list-style: none;">
      <li style="margin-bottom: 20px;"><b>(json-read [port])</b> Reads a JSON file from <i>port</i> and converts it to
   Scheme data. <i>port</i> defaults to (current-input-port).</li>
      <li style="margin-bottom: 20px;"><b>(json-write value [port])</b> Converts <i>value</i> to a JSON file and writes it to <i>port</i>. <i>port</i> defaults to (current-output-port).</li>
      <li style="margin-bottom: 20px;"><b>(json-read-string str)</b> Reads a JSON string <i>str</i> and returns the corresponding
   Scheme data.</li>
      <li style="margin-bottom: 20px;"><b>(json-read-file filepath)</b> Reads a JSON file at <i>filepath</i> and returns the
   corresponding Scheme data.</li>
      <li style="margin-bottom: 20px;"><b>(json-write-string value [prettify] [space-char space-count])</b> Writes <i>value</i> to a new JSON string which is returned. <i>prettify</i> writes the JSON in pretty-printed form, and defaults
   to #f. <i>space-char</i> and <i>space-count</i> specify the
   indentation for pretty-printing, and default to #\tab and 1.</li>
      <li style="margin-bottom: 20px;"><b>(json-write-file value filepath [prettify] [space-char
   space-count])</b> Writes <i>value</i> to a JSON file at <i>filepath</i>. The optional arguments are the same as
   json-write-string and have the same defaults.</li>
      <li style="margin-bottom: 20px;"><b>(json-null)</b> Returns a record of the type json-null, for which
   (eq? (json-null) (json-null)) always returns #t.</li>
      <li style="margin-bottom: 20px;"><b>(json-null? v)</b> Returns #t if <i>v</i> is a record of
   the type json-null.</li>
    </ul>
    <h2>To do:</h2>
    <ul>
      <li>Correctly write Unicode surrogate pairs</li>
    </ul>
    <h2>Performance</h2>
    <p>This library will not work well for very large files. According
  to my tests, here are the relative performance of Chibi, Kawa,
  and Gauche: </p>
    <ul>
      <li>Kawa was ok with a 1,000-line JSON file. Performance was
   unacceptable for a 5,000-line JSON file.</li>
      <li>Chibi was ok with a 5,000-line JSON file. Performance was
   unacceptable for a 10,000-line JSON file.</li>
      <li>Gauche was ok with a 100,000-line JSON file. Performance
   was unacceptable for a 500,000-line JSON file.</li>
    </ul>
    <h2>Data types</h2>
    <p>Note that keys are internally represented as symbols.</p>
    <table border="1" style="width:400" summary="Comparison of JSON vs Scheme data">
      <tr>
        <td width="200">
          <b>Scheme</b>
        </td>
        <td width="200">
          <b>JSON</b>
        </td>
      </tr>
      <tr>
        <td>Hash table (srfi 69)</td>
        <td>Object</td>
      </tr>
      <tr>
        <td>List</td>
        <td>Array</td>
      </tr>
      <tr>
        <td>String</td>
        <td>String</td>
      </tr>
      <tr>
        <td>Number</td>
        <td>Number</td>
      </tr>
      <tr>
        <td>#t</td>
        <td>true</td>
      </tr>
      <tr>
        <td>#f</td>
        <td>false</td>
      </tr>
      <tr>
        <td>json-null record type</td>
        <td>null</td>
      </tr>
    </table>
  </body>
</html>
