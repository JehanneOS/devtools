(import (chibi)
        (chibi io)
        (chibi json)
        (srfi 1)
        (srfi 69)
        (srfi 159 base))

(define header
"/*
 * This file is part of Jehanne.
 *
 * Copyright (C) 2016 Giacomo Tesio <giacomo@tesio.it>
 *
 * Jehanne is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * Jehanne is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Jehanne.  If not, see <http://www.gnu.org/licenses/>.
 */
/* automatically generated by ksyscalls */")

(define includes
"
#include \"u.h\"
#include \"../port/lib.h\"
#include \"mem.h\"
#include \"dat.h\"
#include \"fns.h\"
#include \"../port/error.h\"
#include \"ureg.h\"
")

(define fmt-funcs
"
extern void fmtrwdata(Fmt* f, char* a, int n);
extern void fmtuserstring(Fmt* f, const char* a);
extern void fmtuserstringlist(Fmt* f, const char** argv);

")

(define (indent x)
  (space-to (* x 4)))

(define (ureg-arg x)
  (case x
        ((0)    "di")
        ((1)    "si")
        ((2)    "dx")
        ((3)    "r10")
        ((4)    "r8")
        ((5)    "r9")
        (else   "")))

(define (sysret x)
  (case (string->symbol x)
    ((int)       "i")
    ((int32_t)   "i")
    ((long)      "vl")
    ((int64_t)   "vl")
    ((uintptr_t) "p")
    ((void)      "p")
    ((void*)     "v")
    ((char*)     "v")
    ((char**)    "v")
    ((uint8_t*)  "v")
    ((int32_t*)  "v")
    ((uint64_t*) "v")
    ((int64_t*)  "v")
    (else        (string-append "[?? " x "]"))))

(define (format-arg i str)
  (cond
    ((member str '("int" "int32_t"))
     (each "jehanne_fmtprint(fmt, \" %d\", a" i ");"))
    ((member str '("unsigned int" "uint32_t"))
     ; unsigned int is reserved for flags
     (each "jehanne_fmtprint(fmt, \" %#ux\", a" i ");"))
    ((member str '("long" "int64_t"))
     (each "jehanne_fmtprint(fmt, \" %lld\", a" i ");"))
    ((member str '("unsigned long" "uint64_t"))
     (each "jehanne_fmtprint(fmt, \" %#lud\", a" i ");"))
    ((member str '("void*" "uint8_t*" "const void*" "const uint8_t*"))
     (each "jehanne_fmtprint(fmt, \" %#p\", a" i");"))
    ((member str '("int32_t*" "int*" "const int32_t*" "const int*"))
     (each "jehanne_fmtprint(fmt, \" %#p(%d)\", a" i ", a" i ");"))
    ((member str '("const char*" "char*"))
     (each "fmtuserstring(fmt, a" i ");"))
    ((member str '("const char**" "char**"))
     (each "fmtuserstringlist(fmt, a" i ");"))
    (else
      (each "[?? " str "]"))))

(define (format-ret t)
  (let ((sysret (sysret t)))
    (cond
      ((member t '("int" "int32_t"))
       (each "jehanne_fmtprint(fmt, \" %d\", ret->" sysret ");"))
      ((member t '("unsigned int" "uint32_t"))
       ; unsigned int is reserved for flags
       (each "jehanne_fmtprint(fmt, \" %#ux\", ret->" sysret ");"))
      ((member t '("long" "int64_t"))
       (each "jehanne_fmtprint(fmt, \" %lld\", ret->" sysret ");"))
      ((member t '("unsigned long" "uint64_t" "void"))
       (each "jehanne_fmtprint(fmt, \" %#llud\", ret->" sysret ");"))
      ((member t '("void*" "uintptr_t" "const void*" "const uintptr_t"))
       (each "jehanne_fmtprint(fmt, \" %#p\", ret->" sysret ");"))
      ((member t '("int32_t*" "int*" "const int32_t*" "const int*"))
       (each "jehanne_fmtprint(fmt, \" %#p(%d)\", ret->" sysret
           ", *ret->" sysret ");"))
      (else
       (each "[?? " t "]")))))

(define (format-extern-block syscalls)
  (joined/suffix
    (lambda (x)
      (let* ((name (cdr (assq 'Name x)))
             (ret  (vector-ref (cdr (assq 'Ret x)) 0))
             (args (vector->list (cdr (assq 'Args x)))))
        (each
          "extern " ret " sys" name "("
          (if (= 0 (length args))
              "void"
              (joined displayed args ", ")))))
    (vector->list syscalls)
    (each ");" fl)))

(define (generate-wrapper syscall)
  ;TODO
  (let* ((wrapper (make-hash-table))
         (syscall (alist->hash-table syscall))
         (ret0 (vector-ref (hash-table-ref syscall 'Ret) 0))

         (vargs (hash-table-ref syscall 'Args))
         (args (vector->list vargs))
         (argcount (iota (vector-length vargs)))

         (ret (sysret ret0)))
    (hash-table-set! wrapper 'id (hash-table-ref syscall 'Id))
    (hash-table-set! wrapper 'name (hash-table-ref syscall 'Name))
    (hash-table-set! wrapper 'sysretfield ret)
    (hash-table-set! wrapper 'defaultret
                     (string-append "ret." ret " = (" ret0 ")-1;"))

    ; TODO: Check if using `joined displayed` that much is the way to do it

    (hash-table-set! wrapper 'vars
                      (joined/prefix
                        (lambda (x)
                          (each
                            (indent 1) (car x) " a" (numeric (cadr x)) ";"))
                        (zip args argcount)
                        nl))
    (hash-table-set!  wrapper 'commoncode
                      (joined/prefix
                        (lambda (x)
                          (each
                            (indent 1)
                            "a"
                            (numeric (cadr x))
                            " = ("
                            (car x)
                            ")ureg->"
                            (ureg-arg (cadr x))
                            ";"))
                        (zip args argcount)
                        nl))

    (hash-table-set! wrapper 'execcode
                     (each
                       (indent 1) "ret->" (hash-table-ref wrapper 'sysretfield)
                       " = sys" (hash-table-ref syscall 'Name) "("
                       (joined (lambda (x) (each "a" (numeric x)))
                                argcount
                                ", ")
                       ");"))
    ;TODO
    ; - EntryPrint
    ; - ExitPrint
    ; - 
    (hash-table-set! wrapper 'entryprint
                    (if (string=? "pwrite" (hash-table-ref wrapper 'name))
                        (each
                          (indent 1)(format-arg 0 (vector-ref vargs 0)) nl
                          (indent 1)"fmtrwdata(fmt, (char*)a1, MIN(a2, 64));" nl
                          (indent 1)(format-arg 2 (vector-ref vargs 2)) nl
                          (indent 1)(format-arg 3 (vector-ref vargs 3)) nl)
                        (joined
                          (lambda (x)
                            (each (indent 1) (format-arg (cadr x) (car x)) nl))
                          (zip args argcount))))
    wrapper))

(define (generate-wrappers syscalls)
  (map generate-wrapper (vector->list syscalls)))


(define (wrap_ wrapper)
;TODO
  (each
    "static void" nl
      "wrap_" (hash-table-ref wrapper 'name) "(ScRet* ret, Ureg* ureg)" nl
      "{"
      (hash-table-ref wrapper 'vars) nl
      (hash-table-ref wrapper 'commoncode) nl
      nl
      (hash-table-ref wrapper 'execcode) fl
      "}"
      nl))

(define (default_syscall_ret-wrapper wrapper)
  (each
    (indent 1) "case " (hash-table-ref wrapper 'id) ":" nl
    (indent 2)   (hash-table-ref wrapper 'defaultret) nl
    (indent 2)   "break;"))


(define (generate-kernel-code syscalls)
  (let ((wrappers (generate-wrappers syscalls)))
    (show #t
          (displayed header)
          (displayed includes)
          (displayed fmt-funcs)
          (format-extern-block syscalls)
          nl
          nl

          ; TODO
          (joined/suffix
            wrap_
            wrappers
            nl)
          (indent 0)"int nsyscall = " (length wrappers) ";" nl
          nl
          (indent 0)"ScRet" nl
          (indent 0)"default_syscall_ret(int syscall)" nl
          (indent 0) "{" nl
          (indent 1)"static ScRet zero;" nl
          (indent 1)"ScRet ret = zero;"  nl
          (indent 1)"switch(syscall){"   nl
          (joined/suffix
            displayed
            (map default_syscall_ret-wrapper wrappers)
            nl)
          nl
          (indent 1)  "default:" nl
          (indent 2)     "ret.vl = -1;" nl
          (indent 2)     "break;" nl
          (indent 1)  "}" nl
          (indent 1)  "return ret;" nl
          (indent 0)"}"
          nl
          nl
          (indent 0)"char*" nl
          (indent 0)"syscall_name(int syscall)" nl
          (indent 0)"{" nl
          (indent 1)  "switch(syscall){" nl
          (joined
            (lambda (wrapper)
              (each
                (indent 1)"case " (hash-table-ref wrapper 'id) ":" nl
                (indent 2)  "return \"" (hash-table-ref wrapper 'name)
                               "\";" nl))
            wrappers)
          nl
          (indent 1)  "default:" nl
          (indent 2)    "return nil;" nl
          (indent 1)  "}" nl
          (indent 0)"}" nl
          nl

          (indent 0) "void" nl
          (indent 0) "dispatch_syscall(int syscall, Ureg* ureg, ScRet* ret)" nl
          (indent 0) "{" nl
          (indent 1)   "switch(syscall){" nl
          (joined
            (lambda (wrapper)
              (each
                (indent 1)"case " (hash-table-ref wrapper 'id) ":" nl
                (indent 2)  "wrap_" (hash-table-ref wrapper 'name)
                                   "(ret, ureg);" nl
                (indent 2)  "break;" nl))
            wrappers)
          nl
          (indent 1)   "default:" nl
          (indent 2)   "panic(\"dispatch_syscall: bad sys call number"
                               " %d pc %#p\\n\", syscall, ureg->ip);" nl
          (indent 1)   "}" nl
          (indent 0) "}" nl
          nl

          (joined/prefix
            (lambda (wrapper)
              (each
                (indent 0)"static void" nl
                (indent 0)"enter_" (hash-table-ref wrapper 'name)
                                   "(Fmt* fmt, Ureg* ureg)" nl
                (indent 0)"{"
                (hash-table-ref wrapper 'vars) nl
                (hash-table-ref wrapper 'commoncode) nl
                nl
                (indent 1)"jehanne_fmtprint(fmt, \""
                            (hash-table-ref wrapper 'name)
                            " %#p >\", ureg->ip);" nl
                (indent 1)"if(up->notified)" nl
                (indent 2)  "jehanne_fmtprint(fmt, \"!\");" nl
                (hash-table-ref wrapper 'entryprint)
                nl
                (indent 1)"jehanne_fmtprint(fmt, \"\\n\");" nl
                (indent 0)"}" nl
                ))
            wrappers
            nl)
          nl

          nl
          (indent 0)"char*" nl
          (indent 0)"syscallfmt(int syscall, Ureg* ureg)" nl
          (indent 0)"{" nl
          (indent 1)  "Fmt fmt;" nl
          (indent 1)  "jehanne_fmtstrinit(&fmt);" nl
          (indent 1)  "jehanne_fmtprint(&fmt, \"%d %s \", up->pid, up->text);" nl
          nl
          (indent 1)  "switch(syscall){" nl
          (joined (lambda (wrapper)
                    (each (indent 1) "case " (hash-table-ref wrapper 'id) ":" nl
                          (indent 2)   "enter_" (hash-table-ref wrapper 'name)
                                                "(&fmt, ureg);" nl
                          (indent 2)   "break;" nl))
                  wrappers)
          nl
          (indent 1)  "default:" nl
          (indent 2)    "panic(\"syscallfmt: bad sys call number %d pc %#p\\n\","
                                " syscall, ureg->ip);" nl
          (indent 1)  "}" nl
          nl
          (indent 1)  "return jehanne_fmtstrflush(&fmt);" nl
          (indent 0)"}")))

(define (main args)
  (if (= 2 (length args))
      (generate-kernel-code
        (cdr (assq 'Syscalls
                   (parse-json
                     (call-with-input-file (cadr args) port->string)))))
      (error "Usage: ksyscalls path/to/sysconf.json\n")))

(main (command-line))
